name: Terraform CI/CD Workflow

on:
  pull_request:
    branches:
      - develop
      - main
  push:
    branches:
      - develop
      - main
      - feat_*

jobs:
  terraform:
    runs-on: ubuntu-latest

    # Automatically choose the environment: default is "development", use "production" for the "main" branch
    environment:
      name: "${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}"

    env:
      # Terraform variables are pulled from GitHub Environment Variables
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}

      TF_VAR_environment: "${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Use here-doc usage to create the tfvars file with proper newlines
      # Error: Missing newline after argument
      - name: Create tfvars file from secrets & Print encrypted content
        run: |
          cat <<EOF > deployment/$TF_VAR_environment.tfvars
          ${{ secrets.TFVARS }}
          EOF
          cat deployment/$TF_VAR_environment.tfvars

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      # Terraform Init
      - name: Terraform Init
        run: terraform init -backend=true
        working-directory: deployment/shared

      # - name: Terraform Init
      #   run:
      #     terraform init -backend-config="resource_group_name=rg-terraform-backend" \
      #     -backend-config="storage_account_name=tfstate1727630878" \
      #     -backend-config="container_name=tfstate" \
      #     -backend-config="key=dev.terraform.tfstate"
      #   working-directory: deployment/shared

      # Terraform Plan
      - name: Terraform Plan
        run: terraform plan -var-file="../$TF_VAR_environment.tfvars" -out=tfplan
        working-directory: deployment/shared

      # Terraform Apply
      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
        working-directory: deployment/shared

      - name: Debug State and Outputs
        run: |
          echo "Show Terraform State:"
          terraform show
          echo "Show Terraform Outputs in JSON:"
          terraform output -json
        working-directory: deployment/shared

      # Capture Terraform Output
      - name: Get Terraform Outputs
        run: |
          AKS_CLUSTER_NAME=$(terraform output -raw aks_cluster_name)
          AKS_RESOURCE_GROUP=$(terraform output -raw aks_rg_name)
          ACR_REGISTRY_NAME=$(terraform output -raw acr_registry_name)
          echo "AKS_CLUSTER_NAME=$AKS_CLUSTER_NAME" >> $GITHUB_ENV
          echo "AKS_RESOURCE_GROUP=$AKS_RESOURCE_GROUP" >> $GITHUB_ENV
          echo "ACR_REGISTRY_NAME=$ACR_REGISTRY_NAME" >> $GITHUB_ENV
        working-directory: deployment/shared

      - name: Print Outputs
        run: |
          echo "Using AKS Cluster: $AKS_CLUSTER_NAME"
          echo "Using Resource Group: $AKS_RESOURCE_GROUP"
          echo "Using Registry : $ACR_REGISTRY_NAME"

      # # Terraform Destroy
      # - name: Terraform Destroy
      #   run: terraform destroy -var-file="../$TF_VAR_environment.tfvars" -auto-approve
      #   working-directory: deployment/shared

  # Web App deployment job
  deploy-webapp:
    needs: terraform
    runs-on: ubuntu-latest

    # Automatically choose the environment: default is "development", use "production" for the "main" branch
    environment:
      name: "${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}"

    env:
      # Terraform variables are pulled from GitHub Environment Variables
      REGISTRY_NAME: ${{ secrets.REGISTRY_NAME }}
      AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
      IMAGE_VERSION_WEBAPP: latest
      # # IMAGE_VERSION_WEBAPP: ${{ github.sha }}
      DOCKER_IMAGE_NAME_WEBAPP: ${{ secrets.DOCKER_IMAGE_NAME_WEBAPP }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Azure
        uses: azure/login@v2
        with:
          creds: $AZURE_CREDENTIALS

      # Use the Terraform Output in Subsequent Steps
      - name: Print Outputs
        run: |
          echo "Using AKS Cluster: $AKS_CLUSTER_NAME"
          echo "Using Resource Group: $AKS_RESOURCE_GROUP"
          echo "Using Registry : $ACR_REGISTRY_NAME"

      # Build Docker image
      - name: Build Docker image
        run: |
          docker build -t $REGISTRY_NAME.azurecr.io/webapp:$IMAGE_VERSION_WEBAPP ./src/webapp

      # Login to Azure Container Registry (ACR)
      - name: ACR Login
        run: |
          az acr login --name $REGISTRY_NAME

      # Push Docker image to Azure Container Registry
      - name: Push Docker image
        run: docker push $REGISTRY_NAME.azurecr.io/webapp:$IMAGE_VERSION_WEBAPP

      # Deploy to AKS
      - name: Deploy to AKS
        run: |
          az aks get-credentials --resource-group $AKS_RESOURCE_GROUP --name $AKS_CLUSTER_NAME
          kubectl set image deployment/webapp webapp=$REGISTRY_NAME.azurecr.io/webapp:$IMAGE_VERSION_WEBAPP
